{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "VRL",
  "scopeName": "source.vrl",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#booleans"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#paths"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#variables"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.vrl",
          "match": "#.*$"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.vrl",
          "match": "\\b(if|else|del|abort|log)\\b"
        },
        {
          "name": "keyword.operator.vrl",
          "match": "\\b(and|or|not)\\b"
        },
        {
          "name": "storage.type.vrl",
          "match": "\\b(string|int|float|bool|array|object|timestamp|null)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.vrl",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.vrl",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.vrl",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.vrl",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.vrl",
          "match": "\\b\\d+\\.\\d+\\b"
        },
        {
          "name": "constant.numeric.integer.vrl",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "booleans": {
      "patterns": [
        {
          "name": "constant.language.boolean.vrl",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "constant.language.null.vrl",
          "match": "\\bnull\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.fallible.vrl",
          "match": "\\b(decode_base16|decode_base64|decode_charset|decode_gzip|decode_percent|encode_gzip|to_bool|to_float|to_int|to_regex|to_timestamp|parse_apache_log|parse_cef|parse_common_log|parse_csv|parse_grok|parse_groks|parse_json|parse_key_value|parse_nginx_log|parse_regex|parse_syslog|parse_timestamp|parse_url|parse_user_agent|decrypt|format_timestamp|assert|assert_eq|max|min|join)!?\\b"
        },
        {
          "name": "entity.name.function.infallible.vrl",
          "match": "\\b(append|chunks|compact|filter|flatten|length|push|reverse|slice|sort|unique|encode_base16|encode_base64|encode_charset|encode_percent|to_string|to_unix_timestamp|contains|downcase|ends_with|match|replace|split|starts_with|strip_ansi_escape_codes|strip_whitespace|strlen|upcase|hmac|md5|sha1|sha2|sha3|from_unix_timestamp|now|del|exists|get|has|keys|merge|remove|set|values|is_array|is_bool|is_float|is_int|is_null|is_object|is_string|is_timestamp|log|type|uuid_v4|abs|ceil|floor|round)\\b"
        }
      ]
    },
    "paths": {
      "patterns": [
        {
          "name": "variable.other.property.vrl",
          "match": "\\.[a-zA-Z_][a-zA-Z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z0-9_]*)*"
        },
        {
          "name": "variable.other.index.vrl",
          "match": "\\[\\d+\\]|\\[\"[^\"]*\"\\]|\\['[^']*'\\]"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.vrl",
          "match": "="
        },
        {
          "name": "keyword.operator.comparison.vrl",
          "match": "==|!=|<|<=|>|>="
        },
        {
          "name": "keyword.operator.arithmetic.vrl",
          "match": "\\+|-|\\*|/|%"
        },
        {
          "name": "keyword.operator.logical.vrl",
          "match": "&&|\\|\\||!"
        },
        {
          "name": "keyword.operator.error-coalesce.vrl",
          "match": "\\?\\?"
        },
        {
          "name": "keyword.operator.error-propagation.vrl", 
          "match": "(?<=\\w)!"
        },
        {
          "name": "keyword.operator.fallible-function.vrl",
          "match": "\\b(decode_base16|decode_base64|decode_charset|decode_gzip|decode_percent|encode_gzip|to_bool|to_float|to_int|to_regex|to_timestamp|parse_apache_log|parse_cef|parse_common_log|parse_csv|parse_grok|parse_groks|parse_json|parse_key_value|parse_nginx_log|parse_regex|parse_syslog|parse_timestamp|parse_url|parse_user_agent|decrypt|format_timestamp|assert|assert_eq|max|min|join)(?=\\s*[!\\(])"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.definition.array.begin.vrl",
          "match": "\\["
        },
        {
          "name": "punctuation.definition.array.end.vrl",
          "match": "\\]"
        },
        {
          "name": "punctuation.definition.object.begin.vrl",
          "match": "\\{"
        },
        {
          "name": "punctuation.definition.object.end.vrl",
          "match": "\\}"
        },
        {
          "name": "punctuation.definition.parameters.begin.vrl",
          "match": "\\("
        },
        {
          "name": "punctuation.definition.parameters.end.vrl",
          "match": "\\)"
        },
        {
          "name": "punctuation.separator.comma.vrl",
          "match": ","
        },
        {
          "name": "punctuation.separator.colon.vrl",
          "match": ":"
        },
        {
          "name": "punctuation.separator.semicolon.vrl",
          "match": ";"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.vrl",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  }
}